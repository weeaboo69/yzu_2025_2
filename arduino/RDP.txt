#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// 定義 BLE 相關 UUID
#define SERVICE_UUID        "180F" // 使用標準的電池服務 UUID
#define CHARACTERISTIC_UUID "2A19" // 使用標準的電池等級特性 UUID

const int BUTTON_PIN = 12;  // 原有按鈕
const int BUTTON_PIN2 =27; // 新增按鈕2
const int BUTTON_PIN3 = 14; // 新增按鈕3

bool lastButtonState = false;   // 原有按鈕狀態
bool lastButton2State = false;  // 按鈕2狀態
bool lastButton3State = false;  // 按鈕3狀態
bool button3IsPlaying = false;  // 記錄按鈕3是否正在播放循環音效

unsigned long buttonPressStartTime = 0;  // 按鈕按下開始時間
bool buttonWasPressed = false;  // 按鈕是否已被按下

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;

// 連接狀態回調
class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      Serial.println("裝置已連接");
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      Serial.println("裝置已斷開連接");
    }
};

void setup() {
  Serial.begin(9600);
  pinMode(BUTTON_PIN, INPUT_PULLUP);  // 原有按鈕
  pinMode(BUTTON_PIN2, INPUT_PULLUP); // 新增按鈕2
  pinMode(BUTTON_PIN3, INPUT_PULLUP); // 新增按鈕3
  Serial.println("輪子控制器已啟動 (BLE 模式)");
  
  // 初始化 BLE
  BLEDevice::init("ESP32_RDP_BLE");
  
  // 建立 BLE 服務器
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  
  // 建立 BLE 服務
  BLEService *pService = pServer->createService(SERVICE_UUID);
  
  // 建立 BLE 特性
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );
  
  // 添加描述符
  pCharacteristic->addDescriptor(new BLE2902());
  
  // 啟動服務
  pService->start();
  
  // 啟動廣播
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // iPhone 連接參數
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  
  Serial.println("BLE 已啟動，等待連接...");
}

void loop() {
  bool buttonPressed = !digitalRead(BUTTON_PIN);   // 原有按鈕
  bool button2Pressed = !digitalRead(BUTTON_PIN2); // 新增按鈕2
  bool button3Pressed = !digitalRead(BUTTON_PIN3); // 新增按鈕3
  
  // 原有按鈕邏輯（保持不變）
  if (buttonPressed && !lastButtonState) {
    Serial.println("按鈕1按下");
    if (deviceConnected) {
      const char* commandStr = "BUTTON_PRESSED";
      pCharacteristic->setValue(commandStr);
      pCharacteristic->notify();
      Serial.println("發送按鈕1按下命令");
    }
  }
  
  if (!buttonPressed && lastButtonState) {
      Serial.println("按鈕1放開");
      if (deviceConnected) {
      const char* commandStr = "BUTTON_RELEASED";
      pCharacteristic->setValue(commandStr);
      pCharacteristic->notify();
      Serial.println("發送按鈕1放開命令");
    }
  }
  
  // 按鈕2邏輯：按下播放RDP_2_before，放開播放RDP_2_after
  if (button2Pressed && !lastButton2State) {
    Serial.println("按鈕2按下");
    if (deviceConnected) {
      const char* commandStr = "BUTTON2_PRESSED";
      pCharacteristic->setValue(commandStr);
      pCharacteristic->notify();
      Serial.println("發送按鈕2按下命令");
    }
  }
  
  if (!button2Pressed && lastButton2State) {
    Serial.println("按鈕2放開");
    if (deviceConnected) {
      const char* commandStr = "BUTTON2_RELEASED";
      pCharacteristic->setValue(commandStr);
      pCharacteristic->notify();
      Serial.println("發送按鈕2放開命令");
    }
  }
  
  // 按鈕3邏輯：按下循環播放RDP_3_before，放開播放一次RDP_3_after
  if (button3Pressed && !lastButton3State) {
    Serial.println("按鈕3按下");
    if (deviceConnected) {
      const char* commandStr = "BUTTON3_PRESSED";
      pCharacteristic->setValue(commandStr);
      pCharacteristic->notify();
      Serial.println("發送按鈕3按下命令 (開始循環播放)");
      button3IsPlaying = true;
    }
  }
  
  if (!button3Pressed && lastButton3State) {
    Serial.println("按鈕3放開");
    if (deviceConnected) {
      const char* commandStr = "BUTTON3_RELEASED";
      pCharacteristic->setValue(commandStr);
      pCharacteristic->notify();
      Serial.println("發送按鈕3放開命令 (播放結束音效)");
      button3IsPlaying = false;
    }
  }
  
  // 更新所有按鈕的狀態
  lastButtonState = buttonPressed;
  lastButton2State = button2Pressed;
  lastButton3State = button3Pressed;
  
  // 處理重新連接
  if (!deviceConnected && oldDeviceConnected) {
    delay(500); // 等待 BLE 堆疊準備好
    pServer->startAdvertising(); // 重新開始廣播
    Serial.println("開始重新廣播");
    oldDeviceConnected = deviceConnected;
  }
  
  // 處理新連接
  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
  }
  
  delay(100);
}