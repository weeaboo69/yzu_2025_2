#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>

// 定義 BLE 相關 UUID
#define SERVICE_UUID        "180F" // 使用標準的電池服務 UUID
#define CHARACTERISTIC_UUID "2A19" // 使用標準的電池等級特性 UUID

// 感應器腳位及閾值定義
int zxw = 0;
int lastSentValue = 0;
int sensorValue;
int sensorValue2;

int sensorValue_2;
int sensorValue2_2;

int sensorValue_3;
int sensorValue2_3;


const int SENSOR_PIN = 34;
const int SENSOR_PIN_2 = 35;

const int SENSOR_PIN2 = 33;
const int SENSOR_PIN2_2 = 25;

const int SENSOR_PIN3 = 26;
const int SENSOR_PIN3_2 = 27;

const int TOTAL_MAX = 8100;     // 總值未按壓時的最大值
const int TOTAL_MIN = 7000;     // 總值最大按壓時的最小值
const int BEND_THRESHOLD = 7500;  // 彎曲閾值，低於此值視為彎曲
const int BEND_THRESHOLD2= 7900;
const int SEND_INTERVAL = 50;     // 藍牙發送間隔 (毫秒)
const int MONITOR_INTERVAL = 500; // 監測數值間隔 (毫秒)

const uint8_t CMD_START_BEND = 254;  // 開始彎曲命令
const uint8_t CMD_END_BEND = 253;    // 結束彎曲命令
const uint8_t CMD_START_BEND_2 = 252;  // 開始彎曲命令
const uint8_t CMD_END_BEND_2 = 251;    // 結束彎曲命令
const uint8_t CMD_START_BEND_3 = 250;  // 開始彎曲命令
const uint8_t CMD_END_BEND_3 = 249;    // 結束彎曲命令
unsigned long lastBendStartTime = 0;  // 記錄上次彎曲開始的時間

unsigned long lastSendTime = 0;
unsigned long lastMonitorTime = 0;

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;
bool isBent = false;
bool isBent2 = false;
bool isBent3 = false;            // 是否正在彎曲狀態
bool hornPlayed = false;       // 是否已經播放過聲音

// 連接狀態回調
class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      Serial.println("裝置已連接");
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      Serial.println("裝置已斷開連接");
    }
};

void setup() {
  Serial.begin(9600);
  Serial.println("彎曲感測器音效控制程式已啟動 (BLE 模式)");
  
  // 初始化 BLE
  BLEDevice::init("ESP32_HornBLE_2");
  
  // 建立 BLE 服務器
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  
  // 建立 BLE 服務
  BLEService *pService = pServer->createService(SERVICE_UUID);
  
  // 建立 BLE 特性
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );
  
  // 添加描述符
  pCharacteristic->addDescriptor(new BLE2902());
  
  // 啟動服務
  pService->start();
  
  // 啟動廣播
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // iPhone 連接參數
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  
  Serial.println("BLE 已啟動，等待連接...");
}

void loop() {
  // 讀取感測器值
  sensorValue = analogRead(SENSOR_PIN);
  sensorValue2 = analogRead(SENSOR_PIN_2);
  sensorValue_2 = analogRead(SENSOR_PIN2);
  sensorValue2_2 = analogRead(SENSOR_PIN2_2);
  sensorValue_3 = analogRead(SENSOR_PIN3);
  sensorValue2_3 = analogRead(SENSOR_PIN3_2);
  int totalValue = sensorValue + sensorValue2;
  
  // 將總值限制在設定的範圍內
  totalValue = constrain(totalValue, TOTAL_MIN, TOTAL_MAX);
  
  unsigned long currentTime = millis();
  
  // 定期監測感測器讀數，幫助調整閾值
  if (currentTime - lastMonitorTime >= MONITOR_INTERVAL) {
    Serial.print("感測器讀數: ");
    Serial.println(sensorValue);
    Serial.print("感測器2: ");
    Serial.println(sensorValue2);
    //Serial.print("感測器3: ");
    //Serial.println(sensorValue_2);
    //Serial.print("感測器4: ");
    //Serial.println(sensorValue2_2);
    //Serial.print("感測器5: ");
    //Serial.println(sensorValue_3);
    //Serial.print("感測器6: ");
    //Serial.println(sensorValue2_3);
    lastMonitorTime = currentTime;
  }
  
  // 檢測彎曲狀態變化 (低於閾值表示按壓/彎曲)
  bool currentlyBent = (totalValue < BEND_THRESHOLD);
  bool currentlyBent2 = (totalValue >= BEND_THRESHOLD2);
  
  // 如果從未彎曲變為彎曲
if ((sensorValue2 <= 4050 || sensorValue <= 3600) && !isBent && (currentTime - lastBendStartTime > 800)) {
  isBent = true;
  hornPlayed = false;  // 重置播放標記
  lastBendStartTime = currentTime;  // 記錄彎曲開始的時間
  Serial.println("偵測到彎曲開始");
  zxw = 1;
  
  // 發送彎曲開始訊號
  if (deviceConnected) {
    uint8_t startCommand = CMD_START_BEND;
    pCharacteristic->setValue(&startCommand, 1);
    pCharacteristic->notify();
    Serial.println("發送彎曲開始命令");
  }
}

// 如果從彎曲變為未彎曲，且已經過了防抖動時間
else if ((sensorValue2 >= 4095 && sensorValue >=3800) && isBent && (currentTime - lastBendStartTime >600)) {
  isBent = false;
  Serial.println("偵測到彎曲結束");
  
  // 發送彎曲結束訊號
  if (deviceConnected) {
    uint8_t endCommand = CMD_END_BEND;
    pCharacteristic->setValue(&endCommand, 1);
    pCharacteristic->notify();
    Serial.println("發送彎曲結束命令");
    Serial.println(zxw);
  }
}

if ((sensorValue2_2 <= 3800 || sensorValue2_2 <= 3580) && !isBent2 && (currentTime - lastBendStartTime > 800)) {
  isBent2 = true;
  hornPlayed = false;  // 重置播放標記
  lastBendStartTime = currentTime;  // 記錄彎曲開始的時間
  Serial.println("偵測到2彎曲開始");
  
  // 發送彎曲開始訊號
  if (deviceConnected) {
    uint8_t startCommand = CMD_START_BEND_2;
    pCharacteristic->setValue(&startCommand, 1);
    pCharacteristic->notify();
    Serial.println("發送2彎曲開始命令");
    zxw++;
  }
}
// 如果從彎曲變為未彎曲，且已經過了防抖動時間
else if ((sensorValue2_2 >= 3750 && sensorValue2_2 >=3600) && isBent2 && (currentTime - lastBendStartTime >600)) {
  isBent2 = false;
  Serial.println("偵測到2彎曲結束");
  
  // 發送彎曲結束訊號
  if (deviceConnected) {
    uint8_t endCommand = CMD_END_BEND_2;
    pCharacteristic->setValue(&endCommand, 1);
    pCharacteristic->notify();
    Serial.println("發送2彎曲結束命令");
    Serial.println(zxw);
  }
}


if ((sensorValue2_3 <= 4000 || sensorValue_3 <= 3750) && !isBent3 && (currentTime - lastBendStartTime > 800)) {
  isBent3 = true;
  hornPlayed = false;  // 重置播放標記
  lastBendStartTime = currentTime;  // 記錄彎曲開始的時間
  Serial.println("偵測到3彎曲開始");
  
  // 發送彎曲開始訊號
  if (deviceConnected) {
    uint8_t startCommand = CMD_START_BEND_3;
    pCharacteristic->setValue(&startCommand, 1);
    pCharacteristic->notify();
    Serial.println("發送3彎曲開始命令");
    zxw++;
  }
}
// 如果從彎曲變為未彎曲，且已經過了防抖動時間
else if ((sensorValue2_3 >= 4090 && sensorValue_3 >=3900) && isBent3 && (currentTime - lastBendStartTime >600)) {
  isBent3 = false;
  Serial.println("偵測到3彎曲結束");
  
  // 發送彎曲結束訊號
  if (deviceConnected) {
    uint8_t endCommand = CMD_END_BEND_3;
    pCharacteristic->setValue(&endCommand, 1);
    pCharacteristic->notify();
    Serial.println("發送3彎曲結束命令");
    Serial.println(zxw);
  }
}
  // 在彎曲期間，每當值變化 200 就發送一次
  if (isBent && deviceConnected && currentTime - lastSendTime >= SEND_INTERVAL) {
    // 如果值與上次發送的值相差超過 200
    if (abs(totalValue - lastSentValue) >= 200) {
      // 計算進度值
      int playbackPosition = map(totalValue, TOTAL_MAX, TOTAL_MIN, 0, 100);
      playbackPosition = constrain(playbackPosition, 0, 100);
      
      // 發送進度控制命令
      uint8_t positionValue = (uint8_t)playbackPosition;
      pCharacteristic->setValue(&positionValue, 1);
      pCharacteristic->notify();
      Serial.print("發送新的位置值: ");
      Serial.println(positionValue);
      
      // 更新上次發送的值
      lastSentValue = totalValue;
      lastSendTime = currentTime;
    }
  }
  
  // 有裝置連接時，發送數據
  if (deviceConnected && currentTime - lastSendTime >= SEND_INTERVAL) {
    // 如果正在彎曲且尚未播放聲音
    if (isBent && !hornPlayed) {
      // 發送播放指令 (用特定值如254表示播放觸發)
      uint8_t playCommand = 254;
      pCharacteristic->setValue(&playCommand, 1);
      pCharacteristic->notify();
      hornPlayed = true;  // 標記已播放
      Serial.println("發送播放指令");
    }
    // 如果正在彎曲且已播放聲音，發送位置控制
    else if (isBent && hornPlayed) {
      // 將彎曲值映射到 0-100 範圍作為音檔進度百分比
      // 注意：由於現在低值表示最大按壓，所以映射方向改變
      int playbackPosition = map(totalValue, BEND_THRESHOLD2, TOTAL_MIN, 0, 100);
playbackPosition = constrain(playbackPosition, 0, 100);
      //Serial.println(playbackPosition);


// 添加閾值判斷，當值非常小時(如小於2)，直接設為0
if (playbackPosition < 2) {
    playbackPosition = 0;
}
      
      // 發送進度控制命令
      uint8_t positionValue = (uint8_t)playbackPosition;
      pCharacteristic->setValue(&positionValue, 1);
      pCharacteristic->notify();
      Serial.println(positionValue);
    }
    
    lastSendTime = currentTime;
  }
  
  // 處理重新連接
  if (!deviceConnected && oldDeviceConnected) {
    delay(500); // 等待 BLE 堆疊準備好
    pServer->startAdvertising(); // 重新開始廣播
    Serial.println("開始重新廣播");
    oldDeviceConnected = deviceConnected;
  }
  
  // 處理新連接
  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
  }
  
  delay(5); // 短暫延遲
}