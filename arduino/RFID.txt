#include <BLEDevice.h>
#include <BLEServer.h>
#include <BLEUtils.h>
#include <BLE2902.h>
#include <SPI.h>
#include <MFRC522.h>

// 定義 BLE 相關 UUID
#define SERVICE_UUID        "180F" // 使用標準的電池服務 UUID
#define CHARACTERISTIC_UUID "2A19" // 使用標準的電池等級特性 UUID

// 定義 RFID 感測器的腳位
#define RST_PIN     22    // RST 連接到 GPIO 22
#define SS_PIN      21    // SDA(SS) 連接到 GPIO 21
#define RECORD_BUTTON_PIN  4    // 錄音按鈕連接到 GPIO 4 (可以更換為其他可用的引腳)
#define RDP_RECORD_BUTTON_PIN  5    // RDP錄音按鈕連接到 GPIO 5 (或其他可用的引腳)

// 建立 RFID 物件
MFRC522 rfid(SS_PIN, RST_PIN);

// 記錄目前感應的卡片類型 (0=無卡片, 1=卡片1, 2=卡片2, 3=卡片3)
int currentCard = 0;

// 檢測卡片移開的計數器
int missingCount = 0;

// 定義三張卡片的 UID (以十六進制表示)
// 請更換為您實際卡片的 UID
byte card1UID[4] = {0x0B, 0x1D, 0x2D, 0x05}; // 第一張卡片的UID
byte card2UID[4] = {0x01, 0x86, 0x31, 0x05}; // 第二張卡片的UID
byte card3UID[4] = {0x33, 0xA7, 0xB3, 0x1B}; // 第三張卡片的UID

BLEServer* pServer = NULL;
BLECharacteristic* pCharacteristic = NULL;
bool deviceConnected = false;
bool oldDeviceConnected = false;
bool recordButtonState = false;  // 錄音按鈕的狀態

bool rdpRecordButtonState = false;
// 連接狀態回調
class MyServerCallbacks: public BLEServerCallbacks {
    void onConnect(BLEServer* pServer) {
      deviceConnected = true;
      Serial.println("裝置已連接");
    };

    void onDisconnect(BLEServer* pServer) {
      deviceConnected = false;
      Serial.println("裝置已斷開連接");
    }
};

void setup() {
  Serial.begin(9600);
  SPI.begin();         // 初始化 SPI 總線
  rfid.PCD_Init();     // 初始化 RFID 感測器
  
  pinMode(RECORD_BUTTON_PIN, INPUT_PULLUP);  // 設置錄音按鈕為輸入，啟用內部上拉電阻
  pinMode(RDP_RECORD_BUTTON_PIN, INPUT_PULLUP);
  Serial.println("RFID 音樂控制器已啟動 (BLE 模式)");
  
  // 初始化 BLE
  BLEDevice::init("ESP32_MusicSensor_BLE");
  
  // 建立 BLE 服務器
  pServer = BLEDevice::createServer();
  pServer->setCallbacks(new MyServerCallbacks());
  
  // 建立 BLE 服務
  BLEService *pService = pServer->createService(SERVICE_UUID);
  
  // 建立 BLE 特性
  pCharacteristic = pService->createCharacteristic(
                      CHARACTERISTIC_UUID,
                      BLECharacteristic::PROPERTY_READ   |
                      BLECharacteristic::PROPERTY_WRITE  |
                      BLECharacteristic::PROPERTY_NOTIFY |
                      BLECharacteristic::PROPERTY_INDICATE
                    );
  
  // 添加描述符
  pCharacteristic->addDescriptor(new BLE2902());
  
  // 啟動服務
  pService->start();
  
  // 啟動廣播
  BLEAdvertising *pAdvertising = BLEDevice::getAdvertising();
  pAdvertising->addServiceUUID(SERVICE_UUID);
  pAdvertising->setScanResponse(true);
  pAdvertising->setMinPreferred(0x06);  // iPhone 連接參數
  pAdvertising->setMinPreferred(0x12);
  BLEDevice::startAdvertising();
  
  Serial.println("BLE 已啟動，等待連接...");
}

void loop() {
  bool recordButtonPressed = !digitalRead(RECORD_BUTTON_PIN);
  // 如果先前沒有卡片

  if (recordButtonPressed && !recordButtonState) {
  // 按鈕剛被按下
  Serial.println("錄音按鈕被按下");
  if (deviceConnected) {
    const char* commandStr = "START_RECORDING";
    pCharacteristic->setValue((uint8_t*)commandStr, strlen(commandStr));
    pCharacteristic->notify();
    Serial.println("發送開始錄音命令");
  }
  recordButtonState = true;
  delay(50);  // 簡單的消抖
} else if (!recordButtonPressed && recordButtonState) {
  // 按鈕被釋放
  Serial.println("錄音按鈕被釋放");
  if (deviceConnected) {
    const char* commandStr = "STOP_RECORDING";
    pCharacteristic->setValue((uint8_t*)commandStr, strlen(commandStr));
    pCharacteristic->notify();
    Serial.println("發送停止錄音命令");
  }
  recordButtonState = false;
  delay(50);  // 簡單的消抖
}

// 在 loop() 函數中新增，位於 recordButtonPressed 檢查之後
  bool rdpRecordButtonPressed = !digitalRead(RDP_RECORD_BUTTON_PIN);
  if (rdpRecordButtonPressed && !rdpRecordButtonState) {
    // 按鈕剛被按下
    Serial.println("RDP錄音按鈕被按下");
    if (deviceConnected) {
      const char* commandStr = "START_RDP_RECORDING";
      pCharacteristic->setValue((uint8_t*)commandStr, strlen(commandStr));
      pCharacteristic->notify();
      Serial.println("發送開始RDP錄音命令");
    }
    rdpRecordButtonState = true;
    delay(50);  // 簡單的消抖
  } else if (!rdpRecordButtonPressed && rdpRecordButtonState) {
    // 按鈕被釋放
    Serial.println("RDP錄音按鈕被釋放");
    if (deviceConnected) {
      const char* commandStr = "STOP_RDP_RECORDING";
      pCharacteristic->setValue((uint8_t*)commandStr, strlen(commandStr));
      pCharacteristic->notify();
      Serial.println("發送停止RDP錄音命令");
    }
    rdpRecordButtonState = false;
    delay(50);  // 簡單的消抖
  }

  if (currentCard == 0) {
    // 檢查是否有新卡片
    if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
      // 讀取卡片UID
      Serial.print("偵測到卡片 UID: ");
      printHex(rfid.uid.uidByte, rfid.uid.size);
      
      // 檢查是哪一張卡片
      int cardType = checkCardType(rfid.uid.uidByte, rfid.uid.size);
      
      if (cardType > 0) {
        currentCard = cardType;
        
        Serial.print("偵測到卡片 ");
        Serial.println(currentCard);
        
        // 發送播放命令
        if (deviceConnected) {
          String command = "PLAY_MUSIC_" + String(currentCard);
          pCharacteristic->setValue((uint8_t*)command.c_str(), command.length());
          pCharacteristic->notify();
          Serial.print("發送命令: ");
          Serial.println(command);
        }
      } else {
        Serial.println("偵測到無效卡片");
      }
      
      // 停止讀取目前的卡片
      rfid.PICC_HaltA();
      rfid.PCD_StopCrypto1();
    }
  } 
  // 如果先前有卡片，檢查卡片是否移開
  else {
    // 嘗試重新啟動通訊
    rfid.PCD_Init();  // 重新初始化讀卡器
    delay(10);        // 短暫延遲
    
    // 嘗試偵測卡片
    if (rfid.PICC_IsNewCardPresent() && rfid.PICC_ReadCardSerial()) {
      // 卡片仍然存在，檢查是否為同一張卡
      int cardType = checkCardType(rfid.uid.uidByte, rfid.uid.size);
      
      if (cardType == currentCard) {
        // 還是同一張卡，重置計數器
        missingCount = 0;
      } else {
        // 是另一張卡，先發送停止命令
        if (deviceConnected) {
          String stopCommand = "STOP_MUSIC_" + String(currentCard);
          pCharacteristic->setValue((uint8_t*)stopCommand.c_str(), stopCommand.length());
          pCharacteristic->notify();
          Serial.print("發送命令: ");
          Serial.println(stopCommand);
        }
        
        // 然後更新當前卡片類型並發送新的播放命令
        currentCard = cardType;
        
        if (cardType > 0) {
          Serial.print("卡片已更換為卡片 ");
          Serial.println(currentCard);
          
          if (deviceConnected) {
            String playCommand = "PLAY_MUSIC_" + String(currentCard);
            pCharacteristic->setValue((uint8_t*)playCommand.c_str(), playCommand.length());
            pCharacteristic->notify();
            Serial.print("發送命令: ");
            Serial.println(playCommand);
          }
        } else {
          // 無效卡片，視為卡片已移開
          currentCard = 0;
          Serial.println("卡片已移開或更換為無效卡片");
        }
      }
      
      // 停止讀取目前的卡片
      rfid.PICC_HaltA();
      rfid.PCD_StopCrypto1();
    } else {
      // 沒有偵測到卡片，增加計數器
      missingCount++;
      
      // 只有在連續多次未檢測到卡片時才判定卡片已移開
      // 這裡設為1次，您可以根據實際情況調整
      if (missingCount >= 1) {
        int lastCard = currentCard;
        currentCard = 0;
        missingCount = 0;
        
        Serial.println("卡片已移開");
        
        // 發送停止命令
        if (deviceConnected) {
          String stopCommand = "STOP_MUSIC_" + String(lastCard);
          pCharacteristic->setValue((uint8_t*)stopCommand.c_str(), stopCommand.length());
          pCharacteristic->notify();
          Serial.print("發送命令: ");
          Serial.println(stopCommand);
        }
      }
    }
  }
  
  // 處理重新連接
  if (!deviceConnected && oldDeviceConnected) {
    delay(500); // 等待 BLE 堆疊準備好
    pServer->startAdvertising(); // 重新開始廣播
    Serial.println("開始重新廣播");
    oldDeviceConnected = deviceConnected;
  }
  
  // 處理新連接
  if (deviceConnected && !oldDeviceConnected) {
    oldDeviceConnected = deviceConnected;
  }
  
  delay(100);  // 短暫延遲
}

// 檢查卡片類型 (返回1=卡片1, 2=卡片2, 3=卡片3, 0=無效卡片)
int checkCardType(byte *uid, byte size) {
  if (size != 4) return 0; // UID長度必須為4
  
  // 檢查是否是卡片1
  bool isCard1 = true;
  for (byte i = 0; i < 4; i++) {
    if (uid[i] != card1UID[i]) {
      isCard1 = false;
      break;
    }
  }
  if (isCard1) return 1;
  
  // 檢查是否是卡片2
  bool isCard2 = true;
  for (byte i = 0; i < 4; i++) {
    if (uid[i] != card2UID[i]) {
      isCard2 = false;
      break;
    }
  }
  if (isCard2) return 2;
  
  // 檢查是否是卡片3
  bool isCard3 = true;
  for (byte i = 0; i < 4; i++) {
    if (uid[i] != card3UID[i]) {
      isCard3 = false;
      break;
    }
  }
  if (isCard3) return 3;
  
  // 如果都不是，則為無效卡片
  return 0;
}

// 輔助函數：將 UID 轉換為十六進制字串
void printHex(byte *buffer, byte bufferSize) {
  for (byte i = 0; i < bufferSize; i++) {
    Serial.print(buffer[i] < 0x10 ? " 0" : " ");
    Serial.print(buffer[i], HEX);
  }
  Serial.println();
}